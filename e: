[1mdiff --git a/lkfs/Makefile b/lkfs/Makefile[m
[1mindex 5fe45ec..fc510ea 100644[m
[1m--- a/lkfs/Makefile[m
[1m+++ b/lkfs/Makefile[m
[36m@@ -4,4 +4,4 @@[m
 [m
 obj-$(CONFIG_LKFS_FS) += lkfs.o[m
 [m
[31m-lkfs-y := super.o inode.o[m
[32m+[m[32mlkfs-y := super.o inode.o dir.o file.o namei.o ialloc.o[m
[1mdiff --git a/lkfs/inode.c b/lkfs/inode.c[m
[1mindex 057db87..adc6ee2 100644[m
[1m--- a/lkfs/inode.c[m
[1m+++ b/lkfs/inode.c[m
[36m@@ -10,8 +10,225 @@[m
 #include <linux/namei.h>[m
 #include "lkfs.h"[m
 [m
[32m+[m[32mstatic int lkfs_get_blocks(struct inode *inode,[m
[32m+[m			[32m   sector_t iblock, unsigned long maxblocks,[m
[32m+[m			[32m   struct buffer_head *bh_result,[m
[32m+[m			[32m   int create)[m
[32m+[m[32m{[m
[32m+[m	[32mint err = 0;[m
[32m+[m	[32mif (create == 0) {[m
[32m+[m		[32mlkfs_debug("read blocks\n");[m
[32m+[m	[32m} else[m
[32m+[m		[32mlkfs_debug("write err\n");[m
[32m+[m	[41m	[m
[32m+[m	[32mif (LKFS_I(inode)->i_data[iblock] != 0)[m
[32m+[m		[32mmap_bh(bh_result, inode->i_sb, LKFS_I(inode)->i_data[iblock]);[m
[32m+[m	[32melse[m
[32m+[m		[32mlkfs_debug("I need get a new block\n");[m
[32m+[m	[32mreturn 1;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mint lkfs_get_block(struct inode *inode, sector_t iblock, struct buffer_head *bh_result, int create)[m
[32m+[m[32m{[m
[32m+[m	[32munsigned max_blocks = bh_result->b_size >> inode->i_blkbits;[m
[32m+[m	[32mint ret = lkfs_get_blocks(inode, iblock, max_blocks,[m
[32m+[m			[32m      bh_result, create);[m
[32m+[m	[32mif (ret > 0) {[m
[32m+[m		[32mbh_result->b_size = (ret << inode->i_blkbits);[m
[32m+[m		[32mret = 0;[m
[32m+[m	[32m}[m
[32m+[m	[32mreturn ret;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mstatic int lkfs_readpage(struct file *file, struct page *page)[m
[32m+[m[32m{[m
[32m+[m	[32mreturn mpage_readpage(page, lkfs_get_block);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mint __lkfs_write_begin(struct file *file, struct address_space *mapping,[m
[32m+[m		[32mloff_t pos, unsigned len, unsigned flags,[m
[32m+[m		[32mstruct page **pagep, void **fsdata)[m
[32m+[m[32m{[m
[32m+[m	[32mreturn block_write_begin_newtrunc(file, mapping, pos, len, flags,[m
[32m+[m					[32mpagep, fsdata, lkfs_get_block);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mstatic int[m
[32m+[m[32mlkfs_write_begin(struct file *file, struct address_space *mapping,[m
[32m+[m		[32mloff_t pos, unsigned len, unsigned flags,[m
[32m+[m		[32mstruct page **pagep, void **fsdata)[m
[32m+[m[32m{[m
[32m+[m	[32mint ret;[m
[32m+[m
[32m+[m	[32m*pagep = NULL;[m
[32m+[m	[32mret = __lkfs_write_begin(file, mapping, pos, len, flags, pagep, fsdata);[m
[32m+[m	[32m//if (ret < 0)[m
[32m+[m	[32m//	ext2_write_failed(mapping, pos + len);[m
[32m+[m	[32mreturn ret;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mconst struct address_space_operations lkfs_aops = {[m
[32m+[m	[32m.readpage		= lkfs_readpage,[m
[32m+[m[32m/*	.readpages		= ext2_readpages,[m
[32m+[m	[32m.writepage		= ext2_writepage,[m
[32m+[m	[32m.sync_page		= block_sync_page,[m
[32m+[m	[32m.write_begin		= ext2_write_begin,[m
[32m+[m	[32m.write_end		= ext2_write_end,[m
[32m+[m	[32m.bmap			= ext2_bmap,[m
[32m+[m	[32m.direct_IO		= ext2_direct_IO,[m
[32m+[m	[32m.writepages		= ext2_writepages,*/[m
[32m+[m	[32m.migratepage		= buffer_migrate_page,[m
[32m+[m	[32m.is_partially_uptodate	= block_is_partially_uptodate,[m
[32m+[m	[32m.error_remove_page	= generic_error_remove_page,[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32mint lkfs_sync_inode(struct inode *inode)[m
[32m+[m[32m{[m
[32m+[m	[32mstruct writeback_control wbc = {[m
[32m+[m		[32m.sync_mode = WB_SYNC_ALL,[m
[32m+[m		[32m.nr_to_write = 0,	/* sys_fsync did this */[m
[32m+[m	[32m};[m
[32m+[m	[32mreturn sync_inode(inode, &wbc);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mstatic struct lkfs_inode *lkfs_get_inode(struct super_block *sb, ino_t ino,[m
[32m+[m					[32mstruct buffer_head **p)[m
[32m+[m[32m{[m
[32m+[m	[32mstruct buffer_head * bh;[m
[32m+[m	[32munsigned long block_group;[m
[32m+[m	[32munsigned long block;[m
[32m+[m	[32munsigned long offset;[m
[32m+[m
[32m+[m	[32mblock = ((ino - 1) >> LKFS_INODE_PER_SB_BIT) + 2;[m
[32m+[m	[32moffset = ((ino - 1) % LKFS_INODE_PER_SB) * LKFS_INODE_SIZE;[m
[32m+[m	[41m	[m
[32m+[m	[32mif (!(bh = sb_bread(sb, block)))[m
[32m+[m		[32mgoto Eio;[m
[32m+[m
[32m+[m	[32m*p = bh;[m
[32m+[m	[32mreturn (struct lkfs_inode *) (bh->b_data + offset);[m
[32m+[m
[32m+[m[32mEinval:[m
[32m+[m	[32mlkfs_debug("bad inode number: %lu", (unsigned long) ino);[m
[32m+[m	[32mreturn ERR_PTR(-EINVAL);[m
[32m+[m[32mEio:[m
[32m+[m	[32mlkfs_debug("unable to read inode block - inode=%lu, block=%lu",[m
[32m+[m		[32m   (unsigned long) ino, block);[m
[32m+[m[32mEgdp:[m
[32m+[m	[32mreturn ERR_PTR(-EIO);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mstatic int __lkfs_write_inode(struct inode *inode, int do_sync)[m
[32m+[m[32m{[m
[32m+[m	[32mstruct lkfs_inode_info *ei = LKFS_I(inode);[m
[32m+[m	[32mstruct super_block *sb = inode->i_sb;[m
[32m+[m	[32mino_t ino = inode->i_ino;[m
[32m+[m	[32muid_t uid = inode->i_uid;[m
[32m+[m	[32mgid_t gid = inode->i_gid;[m
[32m+[m	[32mstruct buffer_head * bh;[m
[32m+[m	[32mstruct lkfs_inode * raw_inode = lkfs_get_inode(sb, ino, &bh);[m
[32m+[m	[32mint n;[m
[32m+[m	[32mint err = 0;[m
[32m+[m	[32mlkfs_debug("inode:%d\n", inode->i_ino);[m
[32m+[m	[32mif (IS_ERR(raw_inode))[m
[32m+[m[41m [m		[32mreturn -EIO;[m
[32m+[m
[32m+[m	[32m/* For fields not not tracking in the in-memory inode,[m
[32m+[m	[32m * initialise them to zero for new inodes. */[m
[32m+[m	[32m//if (ei->i_state & EXT2_STATE_NEW)[m
[32m+[m	[32mmemset(raw_inode, 0, 128);[m
[32m+[m
[32m+[m	[32mraw_inode->i_mode = cpu_to_le16(inode->i_mode);[m
[32m+[m
[32m+[m	[32mraw_inode->i_uid = cpu_to_le16(inode->i_uid);[m
[32m+[m	[32mraw_inode->i_gid = cpu_to_le16(inode->i_gid);[m
[32m+[m
[32m+[m	[32mraw_inode->i_links_count = cpu_to_le16(inode->i_nlink);[m
[32m+[m	[32mraw_inode->i_size = cpu_to_le32(inode->i_size);[m
[32m+[m	[32mraw_inode->i_atime = cpu_to_le32(inode->i_atime.tv_sec);[m
[32m+[m	[32mraw_inode->i_ctime = cpu_to_le32(inode->i_ctime.tv_sec);[m
[32m+[m	[32mraw_inode->i_mtime = cpu_to_le32(inode->i_mtime.tv_sec);[m
[32m+[m
[32m+[m	[32mraw_inode->i_blocks = cpu_to_le32(inode->i_blocks);[m
[32m+[m
[32m+[m	[32mfor (n = 0; n < LKFS_N_BLOCKS; n++)[m
[32m+[m		[32mraw_inode->i_block[n] = ei->i_data[n];[m
[32m+[m	[32mmark_buffer_dirty(bh);[m
[32m+[m	[41m	[m
[32m+[m	[32msync_dirty_buffer(bh);[m
[32m+[m	[32mif (buffer_req(bh) && !buffer_uptodate(bh)) {[m
[32m+[m		[32mlkfs_debug("IO error syncing lkfs inode [%s:%08lx]\n",[m
[32m+[m			[32msb->s_id, (unsigned long) ino);[m
[32m+[m		[32merr = -EIO;[m
[32m+[m	[32m}[m
[32m+[m	[32mbrelse (bh);[m
[32m+[m	[32mreturn err;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mint lkfs_write_inode(struct inode *inode, struct writeback_control *wbc)[m
[32m+[m[32m{[m
[32m+[m	[32mreturn __lkfs_write_inode(inode, wbc->sync_mode == WB_SYNC_ALL);[m
[32m+[m[32m}[m
[32m+[m
 struct inode *lkfs_iget (struct super_block *sb, unsigned long ino)[m
 {[m
[31m-	return NULL;[m
[32m+[m	[32mstruct lkfs_inode_info *ei;[m
[32m+[m	[32mstruct buffer_head * bh;[m
[32m+[m	[32mstruct lkfs_inode *raw_inode;[m
[32m+[m	[32mstruct inode *inode;[m
[32m+[m	[32mlong ret = -EIO;[m
[32m+[m	[32mint n;[m
[32m+[m
[32m+[m	[32minode = iget_locked(sb, ino);[m
[32m+[m	[32mif (!inode)[m
[32m+[m		[32mreturn ERR_PTR(-ENOMEM);[m
[32m+[m	[32mif (!(inode->i_state & I_NEW))[m
[32m+[m		[32mreturn inode;[m
[32m+[m
[32m+[m	[32mei = LKFS_I(inode);[m
[32m+[m
[32m+[m	[32mraw_inode = lkfs_get_inode(inode->i_sb, ino, &bh);[m
[32m+[m	[32mif (IS_ERR(raw_inode)) {[m
[32m+[m		[32mret = PTR_ERR(raw_inode);[m
[32m+[m[41m [m		[32mgoto bad_inode;[m
[32m+[m	[32m}[m
[32m+[m	[32minode->i_mode = le16_to_cpu(raw_inode->i_mode);[m
[32m+[m	[32minode->i_uid = (uid_t)le16_to_cpu(raw_inode->i_uid);[m
[32m+[m	[32minode->i_gid = (gid_t)le16_to_cpu(raw_inode->i_gid);[m
[32m+[m
[32m+[m	[32minode->i_nlink = le16_to_cpu(raw_inode->i_links_count);[m
[32m+[m	[32minode->i_size = le32_to_cpu(raw_inode->i_size);[m
[32m+[m	[32minode->i_atime.tv_sec = (signed)le32_to_cpu(raw_inode->i_atime);[m
[32m+[m	[32minode->i_ctime.tv_sec = (signed)le32_to_cpu(raw_inode->i_ctime);[m
[32m+[m	[32minode->i_mtime.tv_sec = (signed)le32_to_cpu(raw_inode->i_mtime);[m
[32m+[m	[32minode->i_atime.tv_nsec = inode->i_mtime.tv_nsec = inode->i_ctime.tv_nsec = 0;[m
[32m+[m
[32m+[m	[32minode->i_blocks = le32_to_cpu(raw_inode->i_blocks);[m
[32m+[m
[32m+[m	[32m/*[m
[32m+[m	[32m * NOTE! The in-memory inode i_data array is in little-endian order[m
[32m+[m	[32m * even on big-endian machines: we do NOT byteswap the block numbers![m
[32m+[m	[32m */[m
[32m+[m	[32mfor (n = 0; n < LKFS_N_BLOCKS; n++)[m
[32m+[m		[32mei->i_data[n] = raw_inode->i_block[n];[m
[32m+[m
[32m+[m	[32mif (S_ISREG(inode->i_mode)) {[m
[32m+[m
[32m+[m		[32minode->i_op = &lkfs_file_inode_operations;[m
[32m+[m		[32minode->i_mapping->a_ops = &lkfs_aops;[m
[32m+[m		[32minode->i_fop = &lkfs_file_operations;[m
[32m+[m	[32m} else if (S_ISDIR(inode->i_mode)) {[m
[32m+[m		[32mlkfs_debug("ino:%d, dir\n", inode->i_ino);[m
[32m+[m		[32minode->i_op = &lkfs_dir_inode_operations;[m
[32m+[m		[32minode->i_fop = &lkfs_dir_operations;[m
[32m+[m		[32minode->i_mapping->a_ops = &lkfs_aops;[m
[32m+[m	[32m}[m
[32m+[m	[32mbrelse (bh);[m
[32m+[m	[32munlock_new_inode(inode);[m
[32m+[m	[32mreturn inode;[m
[32m+[m	[41m	[m
[32m+[m[32mbad_inode:[m
[32m+[m	[32miget_failed(inode);[m
[32m+[m	[32mreturn ERR_PTR(ret);[m
 }[m
 [m
[1mdiff --git a/lkfs/lkfs.h b/lkfs/lkfs.h[m
[1mindex be6e472..7a277bf 100644[m
[1m--- a/lkfs/lkfs.h[m
[1m+++ b/lkfs/lkfs.h[m
[36m@@ -1,13 +1,6 @@[m
 #include <linux/fs.h>[m
 #ifndef _LKFS_H_[m
 #define _LKFS_H_[m
[31m-/*[m
[31m- * lake file system inode data in memory[m
[31m- */[m
[31m-struct lkfs_inode_info {[m
[31m-	__le32	i_data[15];[m
[31m-	struct inode	vfs_inode;[m
[31m-};[m
 [m
 /*[m
  * Structure of a directory entry[m
[36m@@ -46,6 +39,14 @@[m [menum {[m
 #define	LKFS_N_BLOCKS			(LKFS_DIND_BLOCK + 1)[m
 [m
 /*[m
[32m+[m[32m * lake file system inode data in memory[m
[32m+[m[32m */[m
[32m+[m[32mstruct lkfs_inode_info {[m
[32m+[m	[32m__le32	i_data[LKFS_N_BLOCKS];[m
[32m+[m	[32mstruct inode	vfs_inode;[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m/*[m
  * Structure of an inode on the disk[m
  */[m
 struct lkfs_inode {[m
[36m@@ -66,6 +67,9 @@[m [mstruct lkfs_inode {[m
 [m
 #define LKFS_GOOD_OLD_INODE_SIZE 128[m
 #define LKFS_SUPER_MAGIC	0x8309[m
[32m+[m[32m#define LKFS_INODE_PER_SB_BIT 3[m
[32m+[m[32m#define LKFS_INODE_PER_SB 8[m
[32m+[m[32m#define LKFS_INODE_SIZE 128[m
 /*[m
  * Special inode numbers[m
  */[m
[36m@@ -122,16 +126,21 @@[m [mstruct lkfs_sb_info {[m
 	unsigned long s_dir_count;[m
 };[m
 [m
[32m+[m[32m#define LKFS_DIR_PAD		 	4[m
[32m+[m[32m#define LKFS_DIR_ROUND 			(LKFS_DIR_PAD - 1)[m
[32m+[m[32m#define LKFS_DIR_REC_LEN(name_len)	(((name_len) + 8 + LKFS_DIR_ROUND) & \[m
[32m+[m					[32m ~LKFS_DIR_ROUND)[m
[32m+[m
 #define LKFS_DEBUG[m
 /*[m
  * Debug code[m
  */[m
 #ifdef LKFS_DEBUG[m
[31m-#define lkfs_debug(f, a...)	{ \[m
[32m+[m[32m#define lkfs_debug(f, a...)	do { \[m
 					printk ("LKFS-fs DEBUG (%s, %d): %s:", \[m
 						__FILE__, __LINE__, __func__); \[m
 				  	printk (f, ## a); \[m
[31m-					}[m
[32m+[m					[32m} while(0)[m
 #else[m
 #define lkfs_debug(f, a...)	/**/[m
 #endif[m
[36m@@ -145,13 +154,19 @@[m [mstatic inline struct lkfs_sb_info *LKFS_SB(struct super_block *sb)[m
 {[m
 	return sb->s_fs_info;[m
 }[m
[31m-[m
[32m+[m[32m/* super.c */[m
[32m+[m[32mextern const struct address_space_operations lkfs_aops;[m
 [m
 /* inode.c */[m
[31m-extern struct inode *lkfs_iget (struct super_block *, unsigned long);[m
[31m-/*extern int ext2_write_inode (struct inode *, struct writeback_control *);[m
[31m-extern void ext2_evict_inode(struct inode *);[m
[31m-extern int ext2_sync_inode (struct inode *);[m
[32m+[m[32mstruct inode *lkfs_iget (struct super_block *, unsigned long);[m
[32m+[m[32mint lkfs_write_inode (struct inode *, struct writeback_control *);[m
[32m+[m[32mint lkfs_sync_inode (struct inode *);[m
[32m+[m[32mint __lkfs_write_begin(struct file *file, struct address_space *mapping,[m
[32m+[m		[32mloff_t pos, unsigned len, unsigned flags,[m
[32m+[m		[32mstruct page **pagep, void **fsdata);[m
[32m+[m
[32m+[m
[32m+[m[32m/*extern void ext2_evict_inode(struct inode *);[m
 extern int ext2_get_block(struct inode *, sector_t, struct buffer_head *, int);[m
 extern int ext2_setattr (struct dentry *, struct iattr *);[m
 extern void ext2_set_inode_flags(struct inode *inode);[m
[36m@@ -160,4 +175,18 @@[m [mextern int ext2_fiemap(struct inode *inode, struct fiemap_extent_info *fieinfo,[m
 		       u64 start, u64 len);[m
 */[m
 [m
[32m+[m[32m/*lkfs/file.c*/[m
[32m+[m[32mextern const struct file_operations lkfs_file_operations;[m
[32m+[m[32mextern const struct inode_operations lkfs_file_inode_operations;[m
[32m+[m
[32m+[m[32m/*lkfs/namei.c*/[m
[32m+[m[32mextern const struct inode_operations lkfs_dir_inode_operations;[m
[32m+[m[32mextern const struct inode_operations lkfs_special_inode_operations;[m
[32m+[m
[32m+[m[32m/*lkfs/dir.c*/[m
[32m+[m[32mextern const struct file_operations lkfs_dir_operations;[m
[32m+[m[32mint lkfs_add_link (struct dentry *dentry, struct inode *inode);[m
[32m+[m
[32m+[m[32m/*lkfs/ialloc.c*/[m
[32m+[m[32mstruct inode *lkfs_new_inode(struct inode *dir, int mode);[m
 #endif[m
[1mdiff --git a/lkfs/super.c b/lkfs/super.c[m
[1mindex b8c1109..2561318 100644[m
[1m--- a/lkfs/super.c[m
[1m+++ b/lkfs/super.c[m
[36m@@ -1,5 +1,9 @@[m
 /*[m
  * linux/fs/lkfs/super.c[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * Disk struct:[m
[32m+[m[32m * [boot block 0 ][super block 1][inode table block 2 .. 33][data block 34 .. 1023][m
[32m+[m[32m *[m[41m [m
  * Copyright (C) 2012 Hu Yugui(yugui.hu@hotmail.com)[m
  */[m
 [m
[36m@@ -67,8 +71,6 @@[m [mstatic int lkfs_statfs (struct dentry * dentry, struct kstatfs * buf)[m
 	struct lkfs_super_block *es = sbi->s_es;[m
 	u64 fsid;[m
 [m
[31m-	/* spin_lock(&sbi->s_lock); */[m
[31m-[m
 	buf->f_type = LKFS_SUPER_MAGIC;[m
 	buf->f_bsize = sb->s_blocksize;[m
 	buf->f_blocks = le32_to_cpu(es->s_blocks_count);[m
[36m@@ -83,17 +85,29 @@[m [mstatic int lkfs_statfs (struct dentry * dentry, struct kstatfs * buf)[m
 	       le64_to_cpup((void *)es->s_uuid + sizeof(u64));[m
 	buf->f_fsid.val[0] = fsid & 0xFFFFFFFFUL;[m
 	buf->f_fsid.val[1] = (fsid >> 32) & 0xFFFFFFFFUL;[m
[31m-	/* spin_unlock(&sbi->s_lock); */[m
 	return 0;[m
 }[m
 [m
[32m+[m[32mstatic void lkfs_sync_super(struct super_block *sb, int wait)[m
[32m+[m[32m{[m
[32m+[m	[32mmark_buffer_dirty(LKFS_SB(sb)->s_sbh);[m
[32m+[m	[32mif (wait)[m
[32m+[m		[32msync_dirty_buffer(LKFS_SB(sb)->s_sbh); /* update superblock */[m
[32m+[m	[32msb->s_dirt = 0;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid lkfs_write_super(struct super_block *sb)[m
[32m+[m[32m{[m
[32m+[m	[32mlkfs_sync_super(sb, 1);[m
[32m+[m[32m}[m
[32m+[m
 static const struct super_operations lkfs_sops = {[m
 	.alloc_inode	= lkfs_alloc_inode,[m
 	.destroy_inode	= lkfs_destroy_inode,[m
[31m-	/*.write_inode	= lkfs_write_inode,[m
[31m-	.put_super	= lkfs_put_super,[m
[32m+[m	[32m.write_inode	= lkfs_write_inode,[m
[32m+[m	[32m//.put_super	= lkfs_put_super,[m
 	.write_super	= lkfs_write_super,[m
[31m-	.sync_fs	= lkfs_sync_fs,*/[m
[32m+[m[32m/*	.sync_fs	= lkfs_sync_fs,*/[m
 	.statfs		= lkfs_statfs,[m
 	/*.remount_fs	= lkfs_remount,*/[m
 };[m
[36m@@ -117,8 +131,6 @@[m [mstatic int lkfs_fill_super(struct super_block *sb, void *data, int silent)[m
 	sb->s_fs_info = sbi;[m
 	sbi->s_sb_block = 1; /* boot block */[m
 [m
[31m-	/* spin_lock_init(&sbi->s_lock); */[m
[31m-[m
 	blocksize = sb_min_blocksize(sb, BLOCK_SIZE);[m
 	if (!blocksize) {[m
 		lkfs_debug("error: unable to set blocksize\n");[m
[36m@@ -129,29 +141,24 @@[m [mstatic int lkfs_fill_super(struct super_block *sb, void *data, int silent)[m
 		lkfs_debug("error: unable to read superblock\n");[m
 		goto failed_sbi;[m
 	}[m
[31m-[m
[32m+[m	[32msbi->s_sbh = bh; /* super block buffer head in memory */[m
 	es = (struct lkfs_super_block *) (((char *)bh->b_data) + offset);[m
 	sbi->s_es = es;[m
 	sb->s_magic = le16_to_cpu(es->s_magic);[m
[31m-[m
[32m+[m	[32mlkfs_debug("lkfs id: %s\n", es->s_volume_name);[m
 	if (sb->s_magic != LKFS_SUPER_MAGIC)[m
 		goto cantfind_lkfs;[m
 [m
 	blocksize = BLOCK_SIZE << le32_to_cpu(sbi->s_es->s_log_block_size);[m
 	sbi->s_inode_size = LKFS_GOOD_OLD_INODE_SIZE;[m
 	sbi->s_first_ino = LKFS_GOOD_OLD_FIRST_INO;[m
[31m-	[m
[32m+[m	[32msb->s_maxbytes = 8192 << 10;[m
 [m
 	if (sb->s_blocksize != bh->b_size) {[m
 			lkfs_debug(sb, KERN_ERR, "error: unsupported blocksize\n");[m
 		goto failed_mount;[m
 	}[m
 [m
[31m-	//get_random_bytes(&sbi->s_next_generation, sizeof(u32));[m
[31m-[m
[31m-	/*[m
[31m-	 * set up enough so that it can read an inode[m
[31m-	 */[m
 	sb->s_op = &lkfs_sops;[m
 [m
 	root = lkfs_iget(sb, LKFS_ROOT_INO);[m
